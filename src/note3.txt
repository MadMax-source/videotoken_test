===>>> CREATETOKEN.TSX




'use client';

import { useState } from 'react';
import { createFungible, mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import { createTokenIfMissing, findAssociatedTokenPda, getSplAssociatedTokenProgramId, mintTokensTo } from '@metaplex-foundation/mpl-toolbox';
import { createGenericFile, percentAmount, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { base58 } from '@metaplex-foundation/umi/serializers';
import { irysUploader } from '@metaplex-foundation/umi-uploader-irys';
import umiWithCurrentWalletAdapter from '../lib/umi/umiWithCurrentWalletAdapter';

export default function CreateToken() {
  const [formData, setFormData] = useState({
    name: '',
    symbol: '',
    description: '',
    decimals: 9,
    supply: '',
    imageFile: null as File | null,
  });
  const [status, setStatus] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: name === 'decimals' ? parseInt(value) : value,
    }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFormData((prev) => ({ ...prev, imageFile: e.target.files![0] }));
    }
  };

  const handleSubmit = async () => {
    const { name, symbol, description, decimals, supply, imageFile } = formData;

    if (!name || !symbol || !description || !imageFile || !supply) {
      setStatus('‚ùå Please fill in all fields and upload an image.');
      return;
    }

    setStatus(null);
    setLoading(true);

    try {
      // 1. Get umi instance with current wallet as signer
      const umi = umiWithCurrentWalletAdapter().use(mplTokenMetadata()).use(irysUploader());

      // 2. Upload image to Irys
      const buffer = new Uint8Array(await imageFile.arrayBuffer());
      const umiImageFile = createGenericFile(buffer, imageFile.name, {
        tags: [{ name: 'Content-Type', value: imageFile.type }],
      });
      const [imageUri] = await umi.uploader.upload([umiImageFile]);

      // 3. Upload metadata
      const metadata = { name, symbol, description, image: imageUri };
      const metadataUri = await umi.uploader.uploadJson(metadata);

      // 4. Create mint keypair (on client)
      const mintKeypair = umi.eddsa.generateKeypair();
      const mintSigner = createSignerFromKeypair(umi, mintKeypair);

      // 5. Build transaction
      const createFungibleIx = createFungible(umi, {
        mint: mintSigner,
        name,
        symbol,
        uri: metadataUri,
        sellerFeeBasisPoints: percentAmount(0),
        decimals: decimals,
      });

      const createTokenIx = createTokenIfMissing(umi, {
        mint: mintSigner.publicKey,
        owner: umi.identity.publicKey,
        ataProgram: getSplAssociatedTokenProgramId(umi),
      });

      const mintTokensIx = mintTokensTo(umi, {
        mint: mintSigner.publicKey,
        token: findAssociatedTokenPda(umi, {
          mint: mintSigner.publicKey,
          owner: umi.identity.publicKey,
        }),
        amount: BigInt(Number(supply)) * BigInt(10 ** parseInt(decimals.toString())),
      });

      // 6. Send transaction (wallet will sign)
      const tx = await createFungibleIx.add(createTokenIx).add(mintTokensIx).sendAndConfirm(umi);
      const signature = base58.deserialize(tx.signature)[0];

      setStatus(
        `‚úÖ Token Created!\n\nüîó Tx: https://explorer.solana.com/tx/${signature}?cluster=devnet\nüîó Mint Address: https://explorer.solana.com/address/${mintSigner.publicKey}?cluster=devnet`
      );
    } catch (err: any) {
      setStatus(`‚ùå Error: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-xl mx-auto mt-10 p-6 border rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">Create SPL Token</h2>
      <input
        type="text"
        name="name"
        placeholder="Token Name"
        className="w-full p-2 border rounded mb-3"
        value={formData.name}
        onChange={handleChange}
      />
      <input
        type="text"
        name="symbol"
        placeholder="Token Symbol"
        className="w-full p-2 border rounded mb-3"
        value={formData.symbol}
        onChange={handleChange}
      />
      <textarea
        name="description"
        placeholder="Token Description"
        className="w-full p-2 border rounded mb-3"
        value={formData.description}
        onChange={handleChange}
      />
      <input
        type="number"
        name="decimals"
        placeholder="Decimals (e.g. 9)"
        className="w-full p-2 border rounded mb-3"
        value={formData.decimals}
        onChange={handleChange}
      />
      <input
        type="number"
        name="supply"
        placeholder="Token Supply"
        className="w-full p-2 border rounded mb-3"
        value={formData.supply}
        onChange={handleChange}
      />
      <input
        type="file"
        accept="image/png, image/jpeg"
        className="mb-3"
        onChange={handleFileChange}
      />
      <button
        onClick={handleSubmit}
        disabled={loading}
        className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 w-full"
      >
        {loading ? 'Creating Token...' : 'Create Token'}
      </button>
      {status && <pre className="mt-4 text-sm whitespace-pre-wrap">{status}</pre>}
    </div>
  );
}




====>>CREATETOKEN.TS







import type { NextApiRequest, NextApiResponse } from 'next';
import { createFungible, mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';
import { createTokenIfMissing, findAssociatedTokenPda, getSplAssociatedTokenProgramId, mintTokensTo } from '@metaplex-foundation/mpl-toolbox';
import { createGenericFile, percentAmount, signerIdentity, createSignerFromKeypair } from '@metaplex-foundation/umi';
import { base58 } from '@metaplex-foundation/umi/serializers';
import { createUmi } from '@metaplex-foundation/umi-bundle-defaults';
import { irysUploader } from '@metaplex-foundation/umi-uploader-irys';
import bs58 from 'bs58';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).end();

  const busboy = require('busboy');
  const bb = busboy({ headers: req.headers });
  let fields: any = {};
  let imageBuffer: Uint8Array[] = [];
  let imageFile: any = null;

  bb.on('file', (name: string, file: any, info: any) => {
    imageFile = info;
    file.on('data', (data: Buffer) => imageBuffer.push(new Uint8Array(data)));
  });

  bb.on('field', (name: string, val: string) => {
    fields[name] = val;
  });

  bb.on('finish', async () => {
    try {
      const { name, symbol, description, decimals, supply } = fields;
      const buffer = Buffer.concat(imageBuffer);
      const uint8ArrayBuffer = new Uint8Array(buffer);

      const umi = createUmi('https://api.devnet.solana.com')
        .use(mplTokenMetadata())
        .use(irysUploader());

      const PRIVATE_KEY_STRING = '34sP7iU74k1rDuHUXdkVHbsNyisAQSno4L53nut3bzTVWdNfGzK5QNFiGt4uQ8Bsc1PgGBkxzUuQmgVoi7Yp9guj';
      const secretKeyBuffer = bs58.decode(PRIVATE_KEY_STRING);
      const secretKeyBytes = new Uint8Array(secretKeyBuffer.buffer, secretKeyBuffer.byteOffset, secretKeyBuffer.length);
      const keypair = umi.eddsa.createKeypairFromSecretKey(secretKeyBytes);
      const signer = createSignerFromKeypair(umi, keypair);
      umi.use(signerIdentity(signer));

      const umiImageFile = createGenericFile(uint8ArrayBuffer, imageFile.filename, {
        tags: [{ name: 'Content-Type', value: imageFile.mimeType }],
      });

      const [imageUri] = await umi.uploader.upload([umiImageFile]);
      const metadata = { name, symbol, description, image: imageUri };
      const metadataUri = await umi.uploader.uploadJson(metadata);

      const mintKeypair = umi.eddsa.generateKeypair();
      const mintSigner = createSignerFromKeypair(umi, mintKeypair);

      const createFungibleIx = createFungible(umi, {
        mint: mintSigner,
        name,
        symbol,
        uri: metadataUri,
        sellerFeeBasisPoints: percentAmount(0),
        decimals: parseInt(decimals),
      });

      const createTokenIx = createTokenIfMissing(umi, {
        mint: mintSigner.publicKey,
        owner: umi.identity.publicKey,
        ataProgram: getSplAssociatedTokenProgramId(umi),
      });

      const mintTokensIx = mintTokensTo(umi, {
        mint: mintSigner.publicKey,
        token: findAssociatedTokenPda(umi, {
          mint: mintSigner.publicKey,
          owner: umi.identity.publicKey,
        }),
        amount: BigInt(Number(supply)) * BigInt(10 ** parseInt(decimals)),
      });

      const tx = await createFungibleIx.add(createTokenIx).add(mintTokensIx).sendAndConfirm(umi);
      const signature = base58.deserialize(tx.signature)[0];

      res.status(200).json({
        txUrl: `https://explorer.solana.com/tx/${signature}?cluster=devnet`,
        mintUrl: `https://explorer.solana.com/address/${mintSigner.publicKey}?cluster=devnet`,
      });
    } catch (err: any) {
      res.status(500).json({ error: err.message });
    }
  });

  req.pipe(bb);
}
